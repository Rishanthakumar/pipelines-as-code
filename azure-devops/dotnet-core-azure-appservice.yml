trigger:
- master
- develop

variables:
  buildPlatform: "Any CPU"
  buildConfiguration: "Release"
  azureSubscription: "<subscription>"
  appName: "<app-service-name>"

pool:
  name: Azure Pipelines
  vmImage: windows-2019

stages:
- stage: Build
  jobs:
    - job: Build
      steps:

        - task: DotNetCoreCLI@2
          displayName: Restore
          inputs:
            command: restore
            projects: '**/*.csproj'
            vstsFeed: '<feed>'

        - task: DotNetCoreCLI@2
          displayName: Build
          inputs:
            projects: '**/DotNetCore.csproj'
            arguments: '--configuration $(BuildConfiguration)'

        - task: DotNetCoreCLI@2
          condition: and(succeeded(), eq(variables.isMaster, false)) 
          displayName: Test
          inputs:
            command: test
            projects: '**/*[Tt]ests/*.csproj'
            arguments:  '--configuration $(BuildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover'
            nobuild: true
            verbosityPack: '-'
            
        
        - task: reportgenerator@4
          displayName: ReportGenerator
          inputs:
              reports: $(Agent.TempDirectory)\**\coverage.opencover.xml
              targetdir: $(Build.SourcesDirectory)\CodeCoverage
              sourcedirs: $(Agent.TempDirectory)
              verbosity: Verbose
              reporttypes: Cobertura

        - task: PublishCodeCoverageResults@1
          displayName: 'Publish code coverage'
          inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(Build.SourcesDirectory)\CodeCoverage\Cobertura.xml'
              reportDirectory: '$(Build.SourcesDirectory)\CodeCoverage'

    - job: Publish
      dependsOn: ['Build']
      steps: 
       - task: DotNetCoreCLI@2
         displayName: Publish
         inputs:
           command: publish
           publishWebProjects: false
           projects: '**/DotNetCore.csproj'
           arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
           zipAfterPublish: true
       - task: PublishBuildArtifacts@1
         displayName: 'Publish Artifact'
         inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)'
        
                
- stage: Deploy
  displayName: 'Deployment'
  dependsOn: ['Build']
  jobs:
  - deployment: 'Deployment'
    displayName: 'Deploy'
    environment: 'qa'
    workspace:
      clean: all
    strategy:
      runOnce:
        deploy:
          steps:

          - task: DownloadBuildArtifacts@0
            inputs:
              artifactName: 'drop'

          - task: AzureWebApp@1
            displayName: 'Deploy to app service'
            inputs:
                azureSubscription: ${{ variables.azureSubscription }}
                appType: webApp
                appName: ${{ variables.appName }}
                package: $(build.artifactstagingdirectory)/**/*.zip 
